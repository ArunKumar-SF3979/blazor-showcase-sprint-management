@if (currentPage == "Kanban")
{
    @if (isMobile)
    {
        <Kanban KanbanData="DataSource" AssignmentCollection=AssignmentCollection onKanbanDataSourceChange="HandleDataSourceChange">
        </Kanban>
    }
    else
    {
        <Kanban KanbanData="DataSource" AssignmentCollection=AssignmentCollection onKanbanDataSourceChange="HandleDataSourceChange">
        </Kanban>
    }
}
@if (currentPage == "Scheduler")
{
    <Scheduler ScheduleData="DataSource" AssignmentCollection=AssignmentCollection onScheduleDataSourceChange="HandleDataSourceChange">

    </Scheduler>
}
@if (currentPage == "Gantt")
{
    <GanttChart TaskCollection="DataSource" AssignmentCollection=AssignmentCollection onGanttDataSourceChange="HandleDataSourceChange">

    </GanttChart>
}
@if (currentPage == "Grid")
{
    <Grid GridData="DataSource" AssignmentCollection=AssignmentCollection onGridDataSourceChange="HandleDataSourceChange">

    </Grid>
}
@code{
    [Parameter]
    public string currentPage { get; set; } = String.Empty;
    [Parameter]
    public List<SprintManagmentModel.TaskInfoModel>? DataSource { get ; set; }
    [Parameter]
    public List<SprintManagmentModel.AssignmentModel> AssignmentCollection { get; set; }
    [Parameter]
    public EventCallback<SprintManagmentModel.SprintModel> onContentDataSourceChanged { get; set; }
    private void HandleDataSourceChange(SprintManagmentModel.SprintModel collection)
    {
        onContentDataSourceChanged.InvokeAsync(collection);
    }
    [Inject]
    SyncfusionBlazorService? SyncfusionService { get; set; }
    private bool isMobile = false;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            string DeviceMode = await JSRuntime.InvokeAsync<string>("getDeviceMode");
            if (DeviceMode == "mobile")
            {
                isMobile = true;
                await SyncfusionBlazorService.SetIsDevice(true);
            }
            else
            {
                isMobile = false;
            }
            StateHasChanged();
        }
    }
}
